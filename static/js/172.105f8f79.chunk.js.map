{"version":3,"file":"static/js/172.105f8f79.chunk.js","mappings":"iIACA,WACIA,WAAY,CAAG,EACfC,KAAM,CAAC,EACPC,OAAQ,qzM","sources":["../../../packages/basic-layouts/README.md"],"sourcesContent":["\nexport default {\n    components: {  },\n    data: {},\n    source: \"@antdp/basic-layouts\\n---\\n\\n[![npm](https://img.shields.io/npm/v/@antdp/basic-layouts.svg?maxAge=3600)](https://www.npmjs.com/package/@antdp/basic-layouts)\\n[![npm download](https://img.shields.io/npm/dm/@antdp/basic-layouts.svg?style=flat)](https://www.npmjs.com/package/@antdp/basic-layouts)\\n\\n入口公共界面\\n\\n## 安装\\n\\n```bash\\n$ npm i @antdp/basic-layouts  # yarn add  @antdp/basic-layouts\\n```\\n\\n## 参数\\n\\n```ts\\nimport React from 'react';\\nimport { IntlShape } from 'react-intl/lib/src/types';\\n\\nexport interface HandleMenuProps {\\n  /**语言转换*/\\n  intlLanguage?: IntlShape;\\n  /**菜单*/\\n  routers: RouterMenu[];\\n  /**是否使用 TOPLEFT 布局*/\\n  isTOPLEFT?: boolean;\\n  /**是否验证权限*/\\n  isCheckAuth?: boolean;\\n}\\n\\nexport interface RouterMenu {\\n  path?: string;\\n  key?: string;\\n  name?: string;\\n  icon?: string;\\n  locale?: string;\\n  side?: boolean;\\n  index?: boolean;\\n  component?: React.ReactNode;\\n  redirect?: string;\\n  redirectTo?: string;\\n  hideInMenu?: boolean;\\n  routes?: RouterMenu[];\\n  children?: RouterMenu[];\\n  order?: number;\\n  /**原来的path*/\\n  oPath?: string;\\n}\\n\\nexport interface BasicLayoutsProps {\\n  /**\\n   * 项目logo\\n   */\\n  logo?: string;\\n  /**\\n   * 项目名称\\n   */\\n  projectName?: React.ReactNode;\\n  children?: React.ReactNode;\\n  /**国际化语言转换方法*/\\n  intlLanguage?: IntlShape;\\n  /**头像下拉菜单*/\\n  topRightMenu?: {\\n    icon?: React.ReactNode;\\n    title?: React.ReactNode;\\n    link?: string;\\n    divider?: boolean;\\n    onClick?: () => void;\\n  }[];\\n  /**\\n   * 设置内容区域补白，默认 14px\\n   */\\n  bodyPadding?: number;\\n  // 顶部右方\\n  topRightLanguage?: React.ReactNode;\\n  /**\\n   * 设置最左边菜单宽度 180\\n   */\\n  siderWidth?: number;\\n  /**\\n   * 用户信息显示\\n   */\\n  profile?: {\\n    /**\\n     * 用户头像\\n     */\\n    avatar?: string;\\n    /**\\n     * 用户名称/昵称\\n     */\\n    name?: string;\\n  };\\n}\\n\\n```\\n\\n## 基本使用\\n\\n```tsx\\nimport BasicLayout from '@antdp/basic-layouts';\\n\\nexport default (props) => {\\n  return (\\n    <BasicLayout\\n      {...props}\\n      projectName=\\\"Ant Design Pro\\\"\\n    />\\n  )\\n};\\n```\\n\\n## 菜单国际化设置\\n\\n```tsx\\nimport BasicLayout from '@antdp/basic-layouts';\\nimport { useIntl,SelectLang } from '@umijs/max';\\n\\nconst Demo = (props) => {\\n  return (\\n    <BasicLayout\\n      {...props}\\n      projectName=\\\"Ant Design Pro\\\"\\n      intlLanguage={useIntl()}\\n      topRightLanguage={<SelectLang />}\\n    />\\n  )\\n};\\nexport default Demo\\n```\\n\\n## 使用`useLayouts`获取数据\\n\\n```tsx\\nimport { useLayouts } from '@antdp/basic-layouts';\\n\\nexport interface LayoutsContextType extends UseLayoutsProps {\\n  HandleMenu: HandleMenu;\\n  /**菜单展开或收缩*/\\n  collapsed: boolean;\\n  /**控制菜单展开或收缩*/\\n  setCollapsed: React.Dispatch<React.SetStateAction<boolean>>;\\n}\\n\\n```\\n\\n**HandleMenu类方法**\\n\\n```tsx\\n\\ninterface HandleMenu {\\n  authMenus: any[] = []\\n  /**所有直接渲染的父级菜单*/\\n  parentMenu: RouterMenu[] = []\\n  parentflatMenu: RouterMenu[] = []\\n  /**子集key对应的父级key*/\\n  childParent: Map<string, string> = new Map([])\\n  /**key对应子集数据*/\\n  childMenu: Map<string, RouterMenu[]> = new Map([])\\n  // 所有子集菜单 平铺\\n  flatMenu: RouterMenu[] = []\\n  // 所有菜单 平铺\\n  flatAllMenu: RouterMenu[] = []\\n  /**语言转换*/\\n  intlLanguage?: IntlShape;\\n  /**路由数据*/\\n  routers: RouterMenu[] = []\\n  /**处理权限后的菜单**/\\n  checkAuthMenus: RouterMenu[] = []\\n\\n  /**当前菜单对应的父级菜单*/\\n  pathToParentMenus: Map<string, RouterMenu[]> = new Map([])\\n\\n  /**是否进行权限校验*/\\n  isCheckAuth?: boolean = false\\n  /**是否使用*/\\n  isTOPLEFT?: boolean = false\\n\\n  /**记录上次父级菜单*/\\n  preParentPath?: string = ''\\n  /**记录上次菜单*/\\n  prePath?: string = ''\\n\\n  /**验证权限*/\\n  checkAuth(path: string): boolean;\\n\\n  /**\\n   * 1. 权限处理\\n   *    1. 子集全部没权限，父级也没有权限\\n   *    2. 子集存在权限，父级也存在权限\\n   *    3. 没有权限的自动把 path 转换成 403  \\n   * */\\n  initAuth(routers: RouterMenu[], isParent: boolean): RouterMenu[]\\n  /**\\n   * 2. 国际化翻译\\n   * */\\n  initLanguage(menus: RouterMenu[], parentLocale: string): void\\n\\n  /**\\n   * 3. 扁平化数据\\n  */\\n  initFlat(menus?: RouterMenu[], parentMenu?: RouterMenu[]): void\\n\\n  /**\\n   * 4. 处理数据,用于顶部和侧边菜单展示联动\\n   * */\\n  handelSiderMenu(menus?: RouterMenu[], isSider?: boolean, parentPath?: string): void\\n\\n  /**\\n   * 5. 获取顶部渲染数据\\n   * */\\n  getTopMenus(menus?: RouterMenu[], index?: number): RouterMenu[]\\n\\n  /**\\n   * 6. 获取导航面包屑\\n   * */\\n  getBreadcrumb(path: string): RouterMenu[]\\n\\n  /**7. 根据当前路由地址取父级key，再使用父级key进行取渲染内容,如果不是顶部渲染方式，则直接默认*/\\n  getSiderMenus(path: string): RouterMenu[]\\n\\n  /**8. 获取父级path*/\\n  getParentPath(path: string): string\\n\\n  /**9. 获取跳转地址*/\\n  getToPath(path: string): string | false | undefined\\n\\n  /**10 更加path地址获取当前配置数据*/\\n  getPathItem(path: string): RouterMenu | undefined\\n}\\n\\n\\n```\\n\"\n  }"],"names":["components","data","source"],"sourceRoot":""}