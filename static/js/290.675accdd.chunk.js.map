{"version":3,"file":"static/js/290.675accdd.chunk.js","mappings":"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","sources":["../../../packages/authorized/esm/format.js","../../../packages/authorized/esm/hooks.js","../../../packages/authorized/esm/AuthButton.js","../../../packages/authorized/esm/index.js","../../../packages/authorized/README.md"],"sourcesContent":["// /**\n//  * @description: 按钮权限\n//  * @param { string } path 路径\n//  * @param { React.ReactNode } children 展示内容\n//  */\n// export const FormatBtn = ({ path, children }: AuthorizedBtnProps) => {\n//   if (!path) {\n//     return children || null;\n//   }\n//   if (!!ANTD_AUTH_CONF) {\n//     const authBtns: AuthList =\n//       (sessionStorage.getItem(ANTD_AUTH_CONF.auth_btn) &&\n//         JSON.parse(sessionStorage.getItem(ANTD_AUTH_CONF.auth_btn) || '[]')) ||\n//       [];\n//     let finx = -1;\n//     if (ANTD_AUTH_CONF.auth_check_url) {\n//       finx = (authBtns as Record<string, unknown>[]).findIndex(\n//         (item) => item[ANTD_AUTH_CONF.auth_check_url] === path,\n//       );\n//     } else {\n//       finx = authBtns.findIndex((item) => item === path);\n//     }\n//     if (finx === -1) {\n//       return null;\n//     }\n//   }\n//   return children || null;\n// };\n/**\n * @description: 根据 menuUrl 判断是否存在权限\n * @param {string} path 路径\n * @param {Array} authMenus 权限路由\n * @return {*}\n */\nvar checkRouter = (path, authMenus) => {\n  var fig = true;\n  var finx = -1;\n  if (ANTD_AUTH_CONF.auth_check_url) {\n    finx = authMenus.findIndex(item => item[ANTD_AUTH_CONF.auth_check_url] === path);\n  } else {\n    finx = authMenus.findIndex(item => item === path);\n  }\n  if (finx === -1) {\n    fig = false;\n  }\n  if (path === '/404' || path === '/403' || path === '/' || path === '/welcome') {\n    fig = true;\n  }\n  return fig;\n};\n/**\n * @description: 页面权限\n * authMenus 权限路由\n * @param {Array} allRouters 原始 routes.json 文件中路由\n * @param {string} pathname 当前路径\n * @return {*}\n */\nexport var getFormatPage = (allRouters, pathname) => {\n  // 1. 有权限 无页面 404\n  // 2. 有权限 有页面 403\n  // 3. 无权限 有页面 403\n  // 4. 无权限 无页面 404\n  // 5. 其他\n  if (!!ANTD_AUTH_CONF) {\n    var allMenu = !!sessionStorage.getItem(ANTD_AUTH_CONF.auth_menu) ? JSON.parse(sessionStorage.getItem(ANTD_AUTH_CONF.auth_menu) || '[]') : [];\n    var check = mapRouterCheck(allRouters, pathname).length > 0 ? true : false;\n    // 若不在权限路由中则提示无权限\n    var authCheck = checkRouter(pathname, allMenu);\n    if (check && !authCheck) {\n      // 无权访问\n      return 403;\n    } else if (check && authCheck) {\n      // 其他\n      return true;\n    } else {\n      // 找不到\n      return 404;\n    }\n  }\n  return true;\n};\n/**\n * @param { Array } data 路由\n * @param { string } pathName 路径\n * @param { Array<true|flase> } list  [ true | flase ]\n * @return {*}\n */\nvar mapRouterCheck = function mapRouterCheck(data, pathName, list) {\n  if (list === void 0) {\n    list = [];\n  }\n  (data || []).forEach(val => {\n    var {\n      path,\n      routes\n    } = val;\n    if (path == pathName || path === '/404' || path === '/403' || path === '/' || path === '/welcome') {\n      list.push(val);\n    } else if (routes) {\n      mapRouterCheck(routes, pathName, list);\n    }\n  });\n  return list;\n};","import React, { createContext, useContext } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar AuthorizedConfigContext = /*#__PURE__*/createContext({\n  auth_menu: \"authMenu\",\n  auth_btn: \"authBtn\",\n  auth_check_url: \"menuUrl\",\n  isCheckAuth: false\n});\nexport var AuthorizedConfigProvider = props => {\n  var {\n    children,\n    auth_menu = \"authMenu\",\n    auth_btn = \"authBtn\",\n    auth_check_url = \"menuUrl\",\n    isCheckAuth = false\n  } = props;\n  return /*#__PURE__*/_jsx(AuthorizedConfigContext.Provider, {\n    value: {\n      auth_menu,\n      auth_btn,\n      auth_check_url,\n      isCheckAuth\n    },\n    children: children\n  });\n};\nexport var useAuthorizedonfig = () => useContext(AuthorizedConfigContext);","import { useAuthorizedonfig } from \"./hooks\";\nimport React, { useMemo } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var AuthButton = props => {\n  var {\n    path,\n    children\n  } = props;\n  var {\n    auth_btn,\n    auth_check_url,\n    isCheckAuth\n  } = useAuthorizedonfig();\n  var authBtns = useMemo(() => {\n    var authBtnStr = sessionStorage.getItem(auth_btn || \"\");\n    if (authBtnStr) {\n      return JSON.parse(authBtnStr);\n    }\n    return [];\n  }, [JSON.stringify({\n    auth_btn,\n    auth_check_url\n  })]);\n  var checkPath = useMemo(() => {\n    if (!isCheckAuth) {\n      return true;\n    }\n    if (auth_check_url) {\n      return !!authBtns.find(ite => ite[auth_check_url] === path);\n    } else {\n      return !!authBtns.find(ite => ite === path);\n    }\n  }, [authBtns, path, isCheckAuth]);\n  if (!path || !isCheckAuth || checkPath) {\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: children\n    });\n  }\n  return /*#__PURE__*/_jsx(React.Fragment, {});\n};\n\n/**\n * 判断按钮路径是否有权限\n*/\nexport var getAuthButton = function getAuthButton(path, other) {\n  if (other === void 0) {\n    other = {};\n  }\n  var {\n    auth_btn,\n    auth_check_url\n  } = other || {};\n  var authBtns = () => {\n    var newAuthBtn = auth_btn;\n    if (!newAuthBtn) {\n      if (typeof ANTD_AUTH_CONF === \"boolean\") {\n        newAuthBtn = \"\";\n      } else {\n        newAuthBtn = ANTD_AUTH_CONF.auth_btn;\n      }\n    }\n    var authBtnStr = sessionStorage.getItem(newAuthBtn || \"\");\n    if (authBtnStr) {\n      return JSON.parse(authBtnStr);\n    }\n    return [];\n  };\n  var checkPath = () => {\n    var newCheckUrl = auth_check_url || \"\";\n    if (!newCheckUrl) {\n      if (typeof ANTD_AUTH_CONF === \"boolean\") {\n        newCheckUrl = \"\";\n      } else {\n        newCheckUrl = ANTD_AUTH_CONF.auth_check_url;\n      }\n    }\n    if (newCheckUrl) {\n      return !!authBtns().find(ite => ite[newCheckUrl] === path);\n    } else {\n      return !!authBtns().find(ite => ite === path);\n    }\n  };\n  return checkPath();\n};","import _extends from \"@babel/runtime/helpers/extends\";\nimport React, { useMemo } from 'react';\nimport { Navigate } from \"react-router-dom\";\nimport {\n// FormatBtn as AuthorizedBtn,\ngetFormatPage as getAuthorizedPage } from './format';\nimport { AuthButton as AuthorizedBtn } from \"./AuthButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport * from \"./hooks\";\nexport * from \"./AuthButton\";\nexport * from \"./interface\";\nexport { AuthorizedBtn, getAuthorizedPage };\nvar Authorized = props => {\n  if (props.authority) {\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: React.Children.map(props.children, child => {\n        if (! /*#__PURE__*/React.isValidElement(child)) return child;\n        return /*#__PURE__*/React.cloneElement(child, _extends({}, child.props));\n      })\n    });\n  }\n  return useMemo(() => {\n    if (props.redirectPath) {\n      return /*#__PURE__*/_jsx(Navigate, {\n        to: props.redirectPath,\n        replace: true\n      });\n    }\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: props.children\n    });\n  }, [props.redirectPath]);\n};\nexport default Authorized;","\nexport default {\n    components: { 114: (function() { \"use strict\";\n\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _authorized = require(\"@antdp/authorized\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n// 为了渲染设置的本地权限数据\nsessionStorage.setItem(\"auth_btn\", JSON.stringify([\"/api/select\"]));\nvar Demo = function Demo() {\n  return /*#__PURE__*/_react[\"default\"].createElement(_authorized.AuthorizedConfigProvider, {\n    isCheckAuth: true\n  }, /*#__PURE__*/_react[\"default\"].createElement(_authorized.AuthorizedBtn, {\n    path: \"/api/select\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(\"button\", null, \"\\u67E5\\u8BE2\")), /*#__PURE__*/_react[\"default\"].createElement(_authorized.AuthorizedBtn, {\n    path: \"/api/select2\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(\"button\", null, \"\\u67E5\\u8BE22\")));\n};\nreturn Demo; })(), },\n    data: {\n  \"114\": {\n    \"name\": 114,\n    \"meta\": {},\n    \"code\": \"\\\"use strict\\\";\\n\\nvar _react = _interopRequireDefault(require(\\\"react\\\"));\\nvar _authorized = require(\\\"@antdp/authorized\\\");\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \\\"default\\\": obj }; }\\n// 为了渲染设置的本地权限数据\\nsessionStorage.setItem(\\\"auth_btn\\\", JSON.stringify([\\\"/api/select\\\"]));\\nvar Demo = function Demo() {\\n  return /*#__PURE__*/_react[\\\"default\\\"].createElement(_authorized.AuthorizedConfigProvider, {\\n    isCheckAuth: true\\n  }, /*#__PURE__*/_react[\\\"default\\\"].createElement(_authorized.AuthorizedBtn, {\\n    path: \\\"/api/select\\\"\\n  }, /*#__PURE__*/_react[\\\"default\\\"].createElement(\\\"button\\\", null, \\\"\\\\u67E5\\\\u8BE2\\\")), /*#__PURE__*/_react[\\\"default\\\"].createElement(_authorized.AuthorizedBtn, {\\n    path: \\\"/api/select2\\\"\\n  }, /*#__PURE__*/_react[\\\"default\\\"].createElement(\\\"button\\\", null, \\\"\\\\u67E5\\\\u8BE22\\\")));\\n};\\nreturn Demo;\",\n    \"language\": \"tsx\",\n    \"value\": \"// 为了渲染设置的本地权限数据\\nsessionStorage.setItem(\\\"auth_btn\\\",JSON.stringify([\\\"/api/select\\\"]))\\n\\nimport React from \\\"react\\\"\\nimport { AuthorizedBtn ,AuthorizedConfigProvider } from \\\"@antdp/authorized\\\"\\n\\nconst Demo = ()=>{\\n  return (<AuthorizedConfigProvider isCheckAuth={true} >\\n    <AuthorizedBtn path=\\\"/api/select\\\" >\\n      <button>查询</button>\\n    </AuthorizedBtn>\\n    <AuthorizedBtn path=\\\"/api/select2\\\" >\\n      <button>查询2</button>\\n    </AuthorizedBtn>\\n  </AuthorizedConfigProvider>)\\n}\\nexport default Demo;\\n\"\n  }\n},\n    source: \"@antdp/authorized\\n---\\n\\n[![npm](https://img.shields.io/npm/v/@antdp/authorized.svg?maxAge=3600)](https://www.npmjs.com/package/@antdp/authorized)\\n[![npm download](https://img.shields.io/npm/dm/@antdp/authorized.svg?style=flat)](https://www.npmjs.com/package/@antdp/authorized)\\n\\n权限判断组件或方法，通过判断是否进入主界面还是登录界面。\\n\\n## Installation\\n\\n```bash\\n$ npm i @antdp/authorized  # yarn add @antdp/authorized\\n```\\n## 参数\\n\\n```ts\\ninterface AuthorizedProps {\\n  /**\\n   * 准入权限/权限判断\\n   */\\n  authority?: boolean;\\n  /**\\n   * 权限异常时重定向的页面路由\\n   */\\n  redirectPath?: string;\\n  children?: React.ReactNode;\\n}\\n/**\\n * @description: 页面权限\\n * @param {Array} menuRouter 原始 routes.json 文件中路由\\n * @param {string} path 当前路径\\n * @return {*}\\n */\\ntype GetAuthorizedPageProps = (menuRouter: Array<any>, path: string) => boolean | 404 | 403\\n// 按钮权限\\ninterface AuthorizedBtnProps {\\n  // 权限路径\\n  path?: string,\\n  // 展示内容\\n  children?: React.ReactNode\\n}\\n```\\n\\n## AuthorizedConfigProvider 设置按钮权限配置\\n\\n使用 `AuthorizedConfigProvider`可以自己进行重新设置组件包裹内的所有按钮的权限参数，不使用默认配置的按钮权限配置\\n\\n```ts\\nexport interface AuthorizedConfigProviderProps {\\n  auth_menu?: string,\\n  auth_btn?: string,\\n  auth_check_url?: string,\\n  isCheckAuth?: boolean\\n  children?: React.ReactNode\\n}\\n\\n```\\n\\n## useAuthorizedonfig 获取当前组件范围内的权限配置参数\\n\\n```ts\\n// 返回参数\\n{\\n  /** 存储本地菜单  key */\\n  auth_menu?: string;\\n  /** 存储本地按钮  key */\\n  auth_btn?: string;\\n  /** 校验 字段  undefined 时 权限数据为  string[] ,否则为 { auth_check_url:string}[] */\\n  auth_check_url?: string | undefined;\\n  /**是否进行权限验证*/\\n  isCheckAuth?: boolean\\n}\\n\\n```\\n\\n## 判断菜单是否有权限\\n\\n```ts\\nimport { getAuthorizedPage } from '@antdp/authorized';\\n\\nconst isCheckMenu = getAuthorizedPage([{path:\\\"/web\\\"},{path:\\\"/examples\\\"}],\\\"/examples\\\")\\n\\n```\\n\\n## 页面权限判断重定向\\n\\n```jsx\\nimport React from 'react';\\nimport BasicLayout from '@antdp/basic-layouts';\\nimport UserLogin from '@antdp/user-login';\\nimport Authorized from '@antdp/authorized';\\n\\n// 入口页面\\nconst UserLayout = (props) => {\\n  return (\\n    <Authorized authority={!props.token} redirectPath=\\\"/login\\\">\\n      <UserLogin />\\n    </Authorized>\\n  )\\n};\\n\\n// 登录页面\\nconst Layout = (props) => {\\n  return (\\n    <Authorized authority={!props.token} redirectPath=\\\"/\\\">\\n      <BasicLayout />\\n    </Authorized>\\n  )\\n};\\n```\\n\\n## 按钮权限\\n\\n```tsx mdx:preview\\n// 为了渲染设置的本地权限数据\\nsessionStorage.setItem(\\\"auth_btn\\\",JSON.stringify([\\\"/api/select\\\"]))\\n\\nimport React from \\\"react\\\"\\nimport { AuthorizedBtn ,AuthorizedConfigProvider } from \\\"@antdp/authorized\\\"\\n\\nconst Demo = ()=>{\\n  return (<AuthorizedConfigProvider isCheckAuth={true} >\\n    <AuthorizedBtn path=\\\"/api/select\\\" >\\n      <button>查询</button>\\n    </AuthorizedBtn>\\n    <AuthorizedBtn path=\\\"/api/select2\\\" >\\n      <button>查询2</button>\\n    </AuthorizedBtn>\\n  </AuthorizedConfigProvider>)\\n}\\nexport default Demo;\\n\\n```\\n\"\n  }"],"names":["getFormatPage","allRouters","pathname","ANTD_AUTH_CONF","allMenu","sessionStorage","getItem","auth_menu","JSON","parse","check","mapRouterCheck","length","authCheck","path","authMenus","fig","auth_check_url","findIndex","item","checkRouter","data","pathName","list","forEach","val","routes","push","AuthorizedConfigContext","createContext","auth_btn","isCheckAuth","AuthorizedConfigProvider","props","children","_props$auth_menu","_props$auth_btn","_props$auth_check_url","_props$isCheckAuth","_jsx","Provider","value","useAuthorizedonfig","useContext","AuthButton","_useAuthorizedonfig","authBtns","useMemo","authBtnStr","stringify","checkPath","find","ite","React","getAuthButton","other","_ref","newAuthBtn","newCheckUrl","authority","child","_extends","redirectPath","Navigate","to","replace","components","obj","_react","__esModule","_authorized","setItem","createElement","AuthorizedBtn","source"],"sourceRoot":""}