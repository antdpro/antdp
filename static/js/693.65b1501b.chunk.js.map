{"version":3,"file":"static/js/693.65b1501b.chunk.js","mappings":"iIACA,WACIA,WAAY,CAAG,EACfC,KAAM,CAAC,EACPC,OAAQ,wnP","sources":["../../../packages/config/README.md"],"sourcesContent":["\nexport default {\n    components: {  },\n    data: {},\n    source: \"@antdp/config\\n---\\n\\n[![npm](https://img.shields.io/npm/v/@antdp/config.svg?maxAge=3600)](https://www.npmjs.com/package/@antdp/config)\\n[![npm download](https://img.shields.io/npm/dm/@antdp/config.svg?style=flat)](https://www.npmjs.com/package/@antdp/config)\\n\\n我们已将 umi 配置包裹一层对于， antdp中能使用的自定义配置，你可以使用项目根目录的  `config/config.ts`进行配置\\n\\n## Installation\\n\\n```bash\\nnpm i @antdp/config --save-dev\\n```\\n\\n## Basic Usage\\n\\n```js\\n// config/config.{js|ts}\\n\\n//二次封装的umi配置\\nimport config from '@antdp/config';\\n// 路由数据\\nimport router from './router.json';\\n/**开发代理配置*/\\nimport proxy from './proxy';\\n\\nexport default config(router, {\\n  proxy,\\n});\\n```\\n\\n## Interface\\n\\n```typescript\\nimport { IConfig, IRoute } from '@umijs/max';\\n\\nexport interface Options extends Omit<IConfig, 'routes'> {\\n  routes: IRoute;\\n}\\n\\nexport interface Config {\\n  (routes?: IRoute, optiosn?: Options): IConfig;\\n}\\n\\ndeclare var config: Config;\\nexport default config;\\n```\\n\\n## define配置\\n\\n### ANTD_IS_TABS\\n\\n是否显示 Tab 选项卡，默认值`true`显示\\n\\n```diff\\nimport config from '@antdp/config';\\nimport proxy from './proxy';\\nimport router from './router.json';\\nexport default config(router, {\\n  proxy,\\n  define: {\\n+    ANTD_IS_TABS: true\\n  },\\n);\\n```\\n\\n### ANTD_IS_IFRAME_RENDER\\n\\n是否使用 iframe 展示内容，默认值`true`开启\\n\\n```diff\\nimport config from '@antdp/config';\\nimport proxy from './proxy';\\nimport router from './router.json';\\nexport default config(router, {\\n  proxy,\\n  define: {\\n+    ANTD_IS_IFRAME_RENDER: true\\n  },\\n);\\n```\\n### ANTD_IS_BREADCRUMB\\n\\n是否开启父子路由面包屑，默认值`false`不显示,只有在`ANTD_TITLE_TOP: true`,时生效\\n\\n```diff\\nimport config from '@antdp/config';\\nimport proxy from './proxy';\\nimport router from './router.json';\\nexport default config(router, {\\n  proxy,\\n  define: {\\n+    ANTD_IS_BREADCRUMB: true\\n  },\\n);\\n```\\n\\n### ANTD_AUTH_CONF\\n\\n是否开启权限验证 默认值`false`不启用\\n\\n- `auth_menu` 储存菜单路由权限---本地keys 默认值`authMenu`\\n- `auth_btn` 储存按钮路径权限---本地keys 默认值 `authBtn`\\n- `auth_check_url` 判断路径是否有权限的字段 默认值`menuUrl`,如果字段设置为`undefined`则`auth_menu`和`auth_btn`储存形式为 `[\\\"/web\\\"]`,反之储存形式为`[{menuUrl:\\\"/web\\\"}]`,\\n\\n```diff\\nimport config from '@antdp/config';\\nimport proxy from './proxy';\\nimport router from './router.json';\\nexport default config(router, {\\n  proxy,\\n  define: {\\n+    ANTD_AUTH_CONF: {\\n+      auth_menu:\\\"authMenu\\\",\\n+      auth_btn:\\\"authBtn\\\",\\n+      auth_check_url:undefined\\n    }\\n  },\\n);\\n\\n```\\n\\n### ANTD_MENU_IS_SHOW\\n\\n是否显示 左侧菜单,默认值`true`\\n\\n```diff\\nimport config from '@antdp/config';\\nimport proxy from './proxy';\\nimport router from './router.json';\\nexport default config(router, {\\n  proxy,\\n  define: {\\n+    ANTD_MENU_IS_SHOW: true\\n  },\\n);\\n```\\n\\n### ANTD_HEAD_IS_SHOW\\n\\n是否显示 head头部，默认值`true`\\n\\n```diff\\nimport config from '@antdp/config';\\nimport proxy from './proxy';\\nimport router from './router.json';\\nexport default config(router, {\\n  proxy,\\n  define: {\\n+    ANTD_HEAD_IS_SHOW: true\\n  },\\n);\\n```\\n\\n### ANTD_MENU_TOP_LEFT\\n\\n父级菜单展示顶部 ，子集菜单展示侧边，默认值`false`不显示\\n\\n```diff\\nimport config from '@antdp/config';\\nimport proxy from './proxy';\\nimport router from './router.json';\\nexport default config(router, {\\n  proxy,\\n  define: {\\n+    ANTD_MENU_TOP_LEFT: true\\n  },\\n);\\n```\\n\\n### ANTD_TITLE_TOP\\n\\n标题 放在 头部 ,菜单放在头部下面，默认值`true`\\n\\n```diff\\nimport config from '@antdp/config';\\nimport proxy from './proxy';\\nimport router from './router.json';\\nexport default config(router, {\\n  proxy,\\n  define: {\\n+    ANTD_TITLE_TOP: true\\n  },\\n);\\n```\\n\\n### ANTD_MENU_SEARCH_IS_SHOW\\n\\n是否开启菜单栏搜索，默认值`false`\\n\\n```diff\\nimport config from '@antdp/config';\\nimport proxy from './proxy';\\nimport router from './router.json';\\nexport default config(router, {\\n  proxy,\\n  define: {\\n+    ANTD_MENU_SEARCH_IS_SHOW: true\\n  },\\n);\\n```\\n\\n## @umijs/max配置\\n\\n### request\\n\\n开启 `useRequest` 和 `request`，默认`未开启`\\n\\n- `dataField` 该配置的默认值是 data。该配置的主要目的是方便 useRequest 直接消费数据。如果你想要在消费数据时拿到后端的原始数据，需要在这里配置 `dataField` 为 ''\\n\\n```diff\\nimport config from '@antdp/config';\\nimport proxy from './proxy';\\nimport router from './router.json';\\nexport default config(router, {\\n  proxy,\\n  define: {},\\n+  request:{}\\n);\\n```\\n\\n### react-query\\n\\n开启`react-query`，默认`未开启`\\n\\n- `devtool`: boolean，是否开启 react query 官方 devtool 工具，默认 `true`\\n- `queryClient`: boolean, 是否注册全局的 QueryClient 和 QueryClientProvier，默认 `true`\\n\\n```diff\\nimport config from '@antdp/config';\\nimport proxy from './proxy';\\nimport router from './router.json';\\nexport default config(router, {\\n  proxy,\\n  define: {},\\n+  reactQuery: {\\n     // 是否开启 react query 官方 devtool 工具\\n+    devtool: false,\\n+    queryClient: true,\\n  },\\n);\\n```\\n\\n### useModel\\n\\n开启`useModel`，默认`未开启`\\n\\n```diff\\nimport config from '@antdp/config';\\nimport proxy from './proxy';\\nimport router from './router.json';\\nexport default config(router, {\\n  proxy,\\n  define: {},\\n+  model: {},\\n);\\n```\\n\\n### dva\\n\\n开启`dva`，默认`未开启`\\n\\n```diff\\nimport config from '@antdp/config';\\nimport proxy from './proxy';\\nimport router from './router.json';\\nexport default config(router, {\\n  proxy,\\n  define: {},\\n+  dva: {},\\n);\\n```\\n\\n### styled-components\\n\\n[styled-components](https://styled-components.com/) 样式方案\\n\\n- `babelPlugin`: Object，开启 styled-components 的 babel 插件，仅 dev 模式有效\\n比如：\\n\\n```diff\\nimport config from '@antdp/config';\\nimport proxy from './proxy';\\nimport router from './router.json';\\nexport default config(router, {\\n  proxy,\\n  define: {},\\n+  styledComponents: {},\\n);\\n```\\n\\n### valtio\\n\\n`valtio` 数据流方案\\n\\n```diff\\nimport config from '@antdp/config';\\nimport proxy from './proxy';\\nimport router from './router.json';\\nexport default config(router, {\\n  proxy,\\n  define: {},\\n+  valtio: {},\\n);\\n```\\n\\n\\n[更多配置参考 umi](https://umijs.org/docs/api/config)\"\n  }"],"names":["components","data","source"],"sourceRoot":""}