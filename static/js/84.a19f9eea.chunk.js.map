{"version":3,"file":"static/js/84.a19f9eea.chunk.js","mappings":"gIACA,WACIA,WAAY,CAAG,EACfC,KAAM,CAAC,EACPC,OAAQ,+xN","sources":["../../../packages/authorized/README.md"],"sourcesContent":["\nexport default {\n    components: {  },\n    data: {},\n    source: \"@antdp/authorized\\n---\\n\\n[![npm](https://img.shields.io/npm/v/@antdp/authorized.svg?maxAge=3600)](https://www.npmjs.com/package/@antdp/authorized)\\n[![npm download](https://img.shields.io/npm/dm/@antdp/authorized.svg?style=flat)](https://www.npmjs.com/package/@antdp/authorized)\\n\\n权限判断组件或方法，通过判断是否进入主界面还是登录界面。\\n\\n# 权限\\n\\n## 下载依赖\\n\\n```bash\\n$ npm i @antdp/authorized  # yarn add @antdp/authorized\\n```\\n\\n## 启用方式\\n配置开启。同时需要 config/config.ts 提供权限配置。\\n```diff\\nimport config from '@antdp/config';\\nimport proxy from './proxy';\\nimport router from './router.json';\\nexport default config(router, {\\n  proxy,\\n  define: {\\n+  ANTD_AUTH_CONF: {\\n+    auth_menu: 'authMenu',\\n+    auth_btn: 'authBtn',\\n+    auth_check_url: true,\\n  }\\n});\\n```\\n\\n### `ANTD_AUTH_CONF` 权限配置参数\\n\\n| 参数 | 说明 | 类型 | 默认值 |\\n| -------- | -------- | -------- | -------- |\\n| auth_menu | 储存菜单路由权限---本地keys | `string`  | `authMenu` |\\n| auth_btn | 储存按钮路径权限---本地keys | `string`  | `authBtn` |\\n| auth_check_url | 判断路径是否有权限的字段 默认值`menuUrl`,如果字段设置为`undefined`则`auth_menu`和`auth_btn`储存形式为 `[\\\"/web\\\"]`,反之储存形式为`[{menuUrl:\\\"/web\\\"}]` | `string`  | `menuUrl` |\\n\\n\\n## 路由菜单权限\\n这是你的路由菜单（config/router.json）\\n```json\\n[\\n  {\\n    \\\"path\\\": \\\"/login\\\",\\n    \\\"component\\\": \\\"@/layouts/UserLayout\\\"\\n  },\\n  {\\n    \\\"path\\\": \\\"/\\\",\\n    \\\"component\\\": \\\"@/layouts/BasicLayout\\\",\\n    \\\"routes\\\": [\\n      {\\n        \\\"path\\\": \\\"/\\\",\\n        \\\"redirectTo\\\": \\\"/welcome\\\"\\n      },\\n      {\\n        \\\"path\\\": \\\"/welcome\\\",\\n        \\\"name\\\": \\\"首页\\\",\\n        \\\"icon\\\": \\\"welcome\\\",\\n        \\\"locale\\\": \\\"welcome\\\",\\n        \\\"component\\\": \\\"@/pages/Home/index\\\"\\n      },\\n      {\\n        \\\"path\\\": \\\"/404\\\",\\n        \\\"name\\\": \\\"404\\\",\\n        \\\"hideInMenu\\\": true,\\n        \\\"icon\\\": \\\"file-protect\\\",\\n        \\\"component\\\": \\\"@/pages/404\\\"\\n      },\\n      {\\n        \\\"path\\\": \\\"/403\\\",\\n        \\\"name\\\": \\\"403\\\",\\n        \\\"hideInMenu\\\": true,\\n        \\\"icon\\\": \\\"file-protect\\\",\\n        \\\"component\\\": \\\"@/pages/403\\\"\\n      }\\n    ]\\n  }\\n]\\n```\\n\\n登陆后后端返回的菜单列表可能如下\\n\\n```js\\nconst menus = ['/', '/welcome', '/404', '/403'];\\n```\\n\\n### 路由匹配过程\\n- 1.当你登陆成功后，你需将其保存于你的sessionStorage中，储存的字段为你`ANTD_AUTH_CONF`中配的`auth_menu`字段，并在登陆后存储在`sessionStorage`中,如`sessionStorage.setItem('authMenu', JSON.stringify([]))`\\n- 2.当你跳转至页面时，会根据sessionStorage中`authMenu`进行权限匹配，如果没有权限则会跳往404或403页面\\n\\n<strong>请保证403 和 404页面存在</strong>\\n\\n\\n## 页面权限重定向\\n如果你想根据 `token`判断是否重定向回登陆页，可在layouts/BasicLayout.ts中添加`Authorized`\\n```ts\\nimport Authorized from '@antdp/authorized';\\nimport BasicLayouts from '@antdp/basic-layouts';\\n\\nconst Layout = () => {\\n  const token =''\\n  return (\\n    <Authorized authority={!!token} redirectPath=\\\"/login\\\">\\n      <BasicLayouts\\n        projectName=\\\"Ant Design\\\"\\n      />\\n    </Authorized>\\n  );\\n};\\n\\nexport default Layout;\\n\\n```\\n\\n## 按钮权限\\n很多大型项目中，也会对按钮权限进行管理,请提前配置好`ANTD_AUTH_CONF`中配的`auth_btn`字段，并在登陆后存储在`sessionStorage`中,如`sessionStorage.setItem(\\\"authBtn\\\",JSON.stringify(['/api/select']))`\\n\\n```tsx\\n// 为了渲染设置的本地权限数\\nimport React from \\\"react\\\"\\nimport { AuthorizedBtn } from \\\"@antdp/authorized\\\"\\nconst Demo = ()=>{\\n  return (\\n    <AuthorizedBtn path=\\\"/api/select\\\" >\\n      <button>按钮</button>\\n    </AuthorizedBtn>\\n  )\\n}\\nexport default Demo;\\n```\\n\\n### AuthorizedBtn参数\\n| 参数 | 说明 | 类型 | 默认值 |\\n| -------- | -------- | -------- | -------- |\\n| path | 权限路径 | `string`  | - |\\n| children | 展示内容 | `React.ReactNode`  | - |\\n\\n## 使用AuthorizedConfigProvider 设置按钮权限配置\\n使用 `AuthorizedConfigProvider`可以自己进行重新设置组件包裹内的所有按钮的权限参数，不使用默认配置的按钮权限配置\\n\\n```tsx\\n  import React from \\\"react\\\"\\n  import { AuthorizedBtn ,AuthorizedConfigProvider } from \\\"@antdp/authorized\\\"\\n  const Page = ()=>{\\n    useEffect(()=>{\\n      sessionStorage.setItem(\\\"btn\\\",JSON.stringify([{ menuUrl:\\\"/api/select\\\"} ]))\\n    },[])\\n    return (\\n      <AuthorizedConfigProvider isCheckAuth={true} auth_btn=\\\"btn\\\">\\n        <AuthorizedBtn path=\\\"/api/select\\\" >\\n          <button>查询</button>\\n        </AuthorizedBtn>\\n      </AuthorizedConfigProvider>\\n  )\\n}\\nexport default Page\\n```\\n\\n### AuthorizedConfigProvider参数\\n| 参数 | 说明 | 类型 | 默认值 |\\n| -------- | -------- | -------- | -------- |\\n| auth_menu | 储存菜单路由权限---本地keys | `string`  | `authMenu` |\\n| auth_btn | 储存按钮路径权限---本地keys | `string`  | `authBtn` |\\n| auth_check_url | 判断路径是否有权限的字段 默认值`menuUrl`,如果字段设置为`undefined`则`auth_menu`和`auth_btn`储存形式为 `[\\\"/web\\\"]`,反之储存形式为`[{menuUrl:\\\"/web\\\"}]` | `string`  | `menuUrl` |\\n| isCheckAuth | 是否检查权限 | `boolean`  | `false` |\\n| children | 子内容 | `string`  | - |\\n\\n## License\\n\\nLicensed under the MIT License.\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"\n  }"],"names":["components","data","source"],"sourceRoot":""}