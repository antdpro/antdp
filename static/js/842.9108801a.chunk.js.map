{"version":3,"file":"static/js/842.9108801a.chunk.js","mappings":"gIACA,WACIA,WAAY,CAAG,EACfC,KAAM,CAAC,EACPC,OAAQ,0kkB","sources":["pages/develop/internationalization/README.md"],"sourcesContent":["\nexport default {\n    components: {  },\n    data: {},\n    source: \"# 国际化\\n\\n`@umi/max` 内置了[国际化插件](https://github.com/umijs/umi/blob/master/packages/plugins/src/locale.ts)，它可以轻松地将国际化功能集成到你的 Umi 应用程序之中。\\n\\n## 开始使用\\n\\n国际化插件采用约定式目录结构，我们约定在 `src/locales` 目录下引入多语言文件。\\n\\n多语言文件的命名需遵循此规范：`<lang><separator><COUNTRY>.(js|json|ts)`。其中，`<separator>` 为分隔符，默认为 `-`，可以通过 `baseSeparator` 项配置。\\n\\n例如，如果您需要在项目中引入简体中文和英文的多语言支持，可以在 `src/locales` 目录下创建 `zh-CN.ts` 和 `en-US.ts` 两个文件：\\n\\n\\n```diff\\nsrc\\n  + locales\\n    + zh-CN.ts\\n    + en-US.ts\\n  pages\\n```\\n\\n在 `config.ts` 中配置国际化插件：\\n\\n```bash\\nlocale: {\\n  // 默认使用 src/locales/zh-CN.ts 作为多语言文件\\n  default: 'zh-CN',\\n  baseSeparator: '-',\\n}\\n```\\n\\n在 `layouts` 中添加`SelectLang` 和 `useIntl`：\\n```diff\\nimport BasicLayout from '@antdp/basic-layouts';\\n+ import { SelectLang, useIntl } from '@umijs/max';\\n\\nconst Layout = (props) => {\\n  return (\\n    <BasicLayout\\n      ...\\n      projectName=\\\"Ant Design\\\"\\n+      topRightLanguage={<SelectLang />}\\n+      intlLanguage={useIntl()}\\n      ...\\n    />\\n  );\\n};\\n\\nexport default Layout;\\n\\n```\\n\\n现在，添加您的第一条多语言内容：\\n\\n```ts\\n// src/locales/zh-CN.ts\\nexport default {\\n  welcome: '欢迎光临 Umi 的世界！',\\n};\\n```\\n\\n```ts\\n// src/locales/en-US.ts\\nexport default {\\n  welcome: \\\"Welcome to Umi's world!\\\",\\n};\\n```\\n\\n您也可以使用 `.json` 文件来存放多语言的内容：\\n\\n```json\\n// src/locales/zh-CN.json\\n{\\n  \\\"welcome\\\": \\\"欢迎光临 Umi 的世界！\\\",\\n}\\n\\n// src/locales/en-US.json\\n{\\n  \\\"welcome\\\": \\\"Welcome to Umi's world!\\\",\\n}\\n```\\n\\n一切就绪，现在您可以在 Umi 中使用多语言内容。交给我们的 `<FormattedMessage />` 组件吧，只需要将前面的 `welcome` 作为参数 `id` 的值传入即可：\\n\\n```tsx\\nimport { FormattedMessage } from 'umijs/max';\\n\\nexport default function Page() {\\n  return (\\n    <div>\\n      <FormattedMessage id=\\\"welcome\\\" />\\n    </div>\\n  );\\n};\\n```\\n\\n渲染的结果如下：\\n\\n```html\\n<!-- zh-CN -->\\n<div>欢迎光临 Umi 的世界！</div>\\n\\n<!-- en-US -->\\n<div>Welcome to Umi's world!</div>\\n```\\n\\n## 在组件的参数中使用\\n\\n在某些情况下，您需要将多语言内容作为参数传递给某个组件。可以通过 `intl` 对象来实现：\\n\\n```tsx\\nimport { Alert } from 'antd';\\nimport { useIntl } from 'umi';\\n\\nexport default function Page() {\\n  const intl = useIntl();\\n  const msg = intl.formatMessage({\\n    id: 'welcome',\\n  });\\n\\n  return <Alert message={msg} type=\\\"success\\\" />;\\n};\\n```\\n\\n在底层，国际化插件基于 [`react-intl`](https://github.com/formatjs/formatjs/tree/main/packages/react-intl) 封装，并支持它的所有接口，详情可见[此文档](https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md)。\\n\\n在上面的代码中，我们就运用到了 `react-intl` 提供的 `useIntl()` 接口来初始化 `intl` 对象，并调用此对象的 [`formatMessage()`](https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#formatmessage) 方法来格式化字符串。\\n\\n## 格式化字符串\\n\\n您可能想要在多语言翻译中动态插值，那么可以像这样编写多语言内容：\\n\\n```ts\\n// src/locales/zh-CN.ts\\nexport default {\\n  user: {\\n    welcome: '{name}，今天也是美好的一天！',\\n  },\\n};\\n```\\n\\n```ts\\n// src/locales/en-US.ts\\nexport default {\\n  user: {\\n    welcome: '{name}, what a nice day!',\\n  },\\n};\\n```\\n\\n在上面，我们编写了特殊的语法 `{name}`，这允许我们在运行时动态赋值：\\n\\n```tsx\\nimport { FormattedMessage } from 'umi';\\n\\nexport default function Page() {\\n  return (\\n    <p>\\n      <FormattedMessage id=\\\"user.welcome\\\" values={{ name: '张三' }} />\\n    </p>\\n  );\\n};\\n```\\n\\n如果您希望通过 `intl` 对象来实现，那么可以这样对它赋值：\\n\\n```tsx\\nimport { useIntl } from '@umijs/max';\\n\\nexport default function Page() {\\n  const intl = useIntl();\\n  const msg = intl.formatMessage(\\n    {\\n      id: 'user.welcome',\\n    },\\n    {\\n      name: '张三',\\n    },\\n  );\\n\\n  return <p>{msg}</p>;\\n};\\n```\\n\\n注意，用于赋值的键值对对象应当作为 `formatMessage()` 方法的第二个参数传递。\\n\\n渲染的结果如下：\\n\\n```html\\n<!-- zh-CN -->\\n<p>张三，今天也是美好的一天！</p>\\n\\n<!-- en-US -->\\n<p>张三, what a nice day!</p>\\n```\\n\\n## 在组件的参数中使用\\n\\n在某些情况下，您需要将多语言内容作为参数传递给某个组件。可以通过 `intl` 对象来实现：\\n\\n```tsx\\nimport { Alert } from 'antd';\\nimport { useIntl } from '@umijs/max';\\n\\nexport default function Page() {\\n  const intl = useIntl();\\n  const msg = intl.formatMessage({\\n    id: 'welcome',\\n  });\\n\\n  return <Alert message={msg} type=\\\"success\\\" />;\\n};\\n```\\n\\n在底层，国际化插件基于 [`react-intl`](https://github.com/formatjs/formatjs/tree/main/packages/react-intl) 封装，并支持它的所有接口，详情可见[此文档](https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md)。\\n\\n在上面的代码中，我们就运用到了 `react-intl` 提供的 `useIntl()` 接口来初始化 `intl` 对象，并调用此对象的 [`formatMessage()`](https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md#formatmessage) 方法来格式化字符串。\\n\\n## 格式化字符串\\n\\n您可能想要在多语言翻译中动态插值，那么可以像这样编写多语言内容：\\n\\n```ts\\n// src/locales/zh-CN.ts\\nexport default {\\n  user: {\\n    welcome: '{name}，今天也是美好的一天！',\\n  },\\n};\\n```\\n\\n```ts\\n// src/locales/en-US.ts\\nexport default {\\n  user: {\\n    welcome: '{name}, what a nice day!',\\n  },\\n};\\n```\\n\\n在上面，我们编写了特殊的语法 `{name}`，这允许我们在运行时动态赋值：\\n\\n```tsx\\nimport { FormattedMessage } from '@umijs/max';\\n\\nexport default function Page() {\\n  return (\\n    <p>\\n      <FormattedMessage id=\\\"user.welcome\\\" values={{ name: '张三' }} />\\n    </p>\\n  );\\n};\\n```\\n\\n如果您希望通过 `intl` 对象来实现，那么可以这样对它赋值：\\n\\n```tsx\\nimport { useIntl } from '@umijs/max';\\n\\nexport default function Page() {\\n  const intl = useIntl();\\n  const msg = intl.formatMessage(\\n    {\\n      id: 'user.welcome',\\n    },\\n    {\\n      name: '张三',\\n    },\\n  );\\n\\n  return <p>{msg}</p>;\\n};\\n```\\n\\n注意，用于赋值的键值对对象应当作为 `formatMessage()` 方法的第二个参数传递。\\n\\n渲染的结果如下：\\n\\n```html\\n<!-- zh-CN -->\\n<p>张三，今天也是美好的一天！</p>\\n\\n<!-- en-US -->\\n<p>张三, what a nice day!</p>\\n```\\n\\n## 常用接口介绍\\n\\n### `addLocale` 动态添加多语言支持\\n\\n无需创建并编写单独的多语言文件，使用 `addLocale()` 接口可以在运行时动态添加语言支持。它接受三个参数：\\n\\n| 参数      | 类型     | 介绍                          |\\n| --------- | -------- | ----------------------------- |\\n| `name`    | `String` | 多语言的 Key                  |\\n| `message` | `Object` | 多语言的内容对象              |\\n| `options` | `Object` | `momentLocale` 和 `antd` 配置 |\\n\\n例如，您想要动态引入繁体中文的多语言支持，可以编写代码如下：\\n\\n```ts\\nimport { addLocale } from '@umijs/max';\\nimport zhTW from 'antd/es/locale/zh_TW';\\n\\naddLocale(\\n  'zh-TW',\\n  {\\n    welcome: '歡迎光臨 Umi 的世界！',\\n  },\\n  {\\n    momentLocale: 'zh-tw',\\n    antd: zhTW,\\n  },\\n);\\n```\\n\\n### `getAllLocales` 获取多语言列表\\n\\n通过 `getAllLocales()` 接口可以获取当前所有多语言选项的数组，包括通过 `addLocale()` 方法添加的多语言选项。该接口默认会在 `src/locales` 目录下寻找形如 `zh-CN.(js|json|ts)` 的文件，并返回多语言的 Key。\\n\\n```ts\\nimport { getAllLocales } from '@umijs/max';\\n\\ngetAllLocales();\\n// [en-US, zh-CN, ...]\\n```\\n\\n### `getLocale` 获取当前选择的语言\\n\\n通过 `getLocale()` 接口可以获取当前选择的语言：\\n\\n```ts\\nimport { getLocale } from '@umijs/max';\\n\\ngetLocale();\\n// zh-CN\\n```\\n\\n### `useIntl` 获取 `intl` 对象\\n\\n`useIntl()` 很有可能会是您开发中最常用的接口，通过它可以获取 `intl` 对象，并进一步执行 `formatMessage()` 等方法来实现您多元的需求：\\n\\n```json\\n// src/locales/en-US.json\\n{\\n  \\\"welcome\\\": \\\"Hi, {name}.\\\"\\n}\\n```\\n\\n```ts\\nimport { useIntl } from '@umijs/max';\\n\\nconst intl = useIntl();\\nconst msg = intl.formatMessage(\\n  {\\n    id: 'welcome',\\n  },\\n  {\\n    name: 'Jackson',\\n  },\\n);\\nconsole.log(msg);\\n// Hi, Jackson.\\n```\\n\\n关于 `intl` 对象的更多用法，请参阅 `react-intl` 的[接口文档](https://github.com/formatjs/formatjs/blob/main/website/docs/react-intl/api.md)。\\n\\n### `setLocale` 设置语言\\n\\n通过 `setLocale()` 接口可以使用编程的方法动态设置当前的语言。它有两个参数：\\n\\n| 参数         | 类型      | 介绍                                       |\\n| ------------ | --------- | ------------------------------------------ |\\n| `lang`       | `String`  | 切换到的语言                               |\\n| `realReload` | `Boolean` | 切换时是否刷新页面，默认为 `true` 刷新页面 |\\n\\n```ts\\nimport { setLocale } from '@umijs/max';\\n\\n// 切换时刷新页面\\nsetLocale('en-US');\\n\\n// 切换时不刷新页面\\nsetLocale('en-US', false);\\n```\\n\\n## 配置插件\\n\\n您可以在 `config.ts` 中配置国际化插件。默认值如下：\\n\\n```ts\\nexport default {\\n  locale: {\\n    antd: false, // 如果项目依赖中包含 `antd`，则默认为 true\\n    baseNavigator: true,\\n    baseSeparator: '-',\\n    default: 'zh-CN',\\n    title: false,\\n    useLocalStorage: true,\\n  },\\n};\\n```\\n\\n配置的详细介绍如下：\\n\\n| 配置项 | 类型 | 默认值 | 介绍 |\\n| --- | --- | --- | --- |\\n| `antd` | `Boolean` | `false`；如果项目包含 `antd` 依赖，则为 `true` | `antd` 的国际化支持。更多介绍可参见[此文档](https://ant.design/docs/react/i18n-cn)。 |\\n| `baseNavigator` | `Boolean` | `true` | 开启**浏览器语言检测**。默认情况下，当前语言环境的识别按照：`localStorage` 中 `umi_locale` 值 > 浏览器检测 > `default` 设置的默认语言 > `zh-CN` |\\n| `baseSeparator` | `String` | `-` | 语言（Language）与国家（Country） 之间的**分割符**。默认情况下为 `-`，返回的语言及目录文件为 `zh-CN`、`en-US` 和 `sk` 等。若指定为 `_`，则 `default` 默认为 `zh_CN`。 |\\n| `default` | `String` | `zh-CN` | 项目**默认语言**。当检测不到具体语言时，使用 `default` 设置的默认语言。 |\\n| `title` | `Boolean` | `false` | 开启[**标题国际化**](#标题国际化)。 |\\n| `useLocalStorage` | `Boolean` | `true` | 自动使用 `localStorage` 保存当前使用的语言。 |\\n\\n### 标题国际化\\n\\n在路由配置中添加 `title` 项即可启用国际化支持，自动将页面的标题转为对应的多语言内容。\\n\\n例如，编写多语言文件如下：\\n\\n```ts\\n// src/locales/zh-CN.ts\\nexport default {\\n  'site.title': 'Umi - 企业级 React 应用开发框架',\\n  'about.title': 'Umi - 关于我',\\n};\\n```\\n\\n```ts\\n// src/locales/en-US.ts\\nexport default {\\n  'site.title': 'Umi - Enterprise-level React Application Framework',\\n  'about.title': 'Umi - About me',\\n};\\n```\\n\\n配置路由内容如下：\\n\\n```json\\n// route.json\\n  [\\n    {\\n      \\\"path\\\": \\\"/login\\\",\\n      \\\"component\\\": \\\"@/layouts/UserLayout\\\"\\n    },\\n     {\\n      \\\"path\\\": \\\"/\\\",\\n      \\\"component\\\": \\\"@/layouts/BasicLayout\\\",\\n      \\\"routes\\\": [\\n        {\\n          \\\"path\\\": \\\"/\\\",\\n          \\\"redirectTo\\\": \\\"/welcome\\\"\\n        },\\n        {\\n          \\\"path\\\": \\\"/welcome\\\",\\n          \\\"name\\\": \\\"首页\\\",\\n          \\\"icon\\\": \\\"welcome\\\",\\n          \\\"locale\\\": \\\"welcome\\\",\\n          \\\"component\\\": \\\"@/pages/Index/index\\\"\\n      },\\n      ]\\n    }\\n ],\\n```\\n## 运行时拓展\\n\\n国际化插件允许您在运行时对它进行一些拓展与定制。\\n\\n### 自定义 `getLocale`\\n\\n您可以自定义获取页面语言 `getLocale()` 方法的逻辑，例如通过识别链接 `?locale=en-US`，将 `en-US` 作为当前页面的语言：\\n\\n```ts\\n// src/app.ts\\nimport qs from 'qs';\\n\\nexport const locale = {\\n  getLocale() {\\n    const { search } = window.location;\\n    const { locale = 'zh-CN' } = qs.parse(search, { ignoreQueryPrefix: true });\\n    return locale;\\n  },\\n};\\n```\\n## FAQ\\n\\n### 为什么不直接使用 `formatMessage` 这个语法糖？\\n\\n虽然 `formatMessage` 直接使用起来会非常方便，但是它脱离了 React 的生命周期，最严重的问题就是切换语言时无法触发 DOM 的重新渲染。为了解决这个问题，我们切换语言时就需要刷新一下浏览器，用户体验很差。所以推荐大家使用 `useIntl` 或者 `injectIntl`，可以实现同样的功能。\\n\\n\\n## License\\n\\nLicensed under the MIT License.\"\n  }"],"names":["components","data","source"],"sourceRoot":""}