{"version":3,"file":"static/js/959.4e7ff195.chunk.js","mappings":"iIACA,WACIA,WAAY,CAAG,EACfC,KAAM,CAAC,EACPC,OAAQ,wmN","sources":["pages/develop/request/README.md"],"sourcesContent":["\nexport default {\n    components: {  },\n    data: {},\n    source: \"# 请求\\n简介\\n对于中后台应用来说，很大一部分工作就在于请求后端的 CRUD 的接口，为进一步降低用户对请求层的感知，我们移除了默认生成的 utils/request.ts 文件，改成通过配置化的方式暴露给开发者做请求的配置和增强处理；同时通过业务总结出一套标准的接口结构规范，并提供统一的接口解析、错误处理的能力；后续将持续完善可配置项、提供垂直场景如列表、登录失效等解决方案。\\n## request\\n\\n我们基于umi-request进行了二次封装了@antp/request，参见[umi-request](https://github.com/umijs/umi-request)\\n\\n### 参数\\n\\n| 参数    | 说明     | 类型           | 默认值 |\\n| :------ | :------- | :------------- | :----- |\\n| url | 请求地址 | string        | -      |\\n\\n### Options\\n| 参数    | 说明     | 类型           | 默认值 |\\n| :------ | :------- | :------------- | :----- |\\n| method | 请求方法 | `POST \\\\| GET`    | -      |\\n| data | 请求传递给后端的参数 | any      | -      |\\n\\n### 使用方法\\n```js\\nimport request from '@antdp/request';\\nrequest('/api/user', {method:'POST' ,data: { name : 1 }})\\n```\\n\\n## 配置umi内置 request 和 useRequest\\n在项目config/config中添加如下 \\n```diff\\nexport default {\\n+  request: {\\n+    dataField: 'data'\\n+  },\\n};\\n```\\n构建时配置可以为 useRequest 配置 dataField ，该配置的默认值是 data。该配置的主要目的是方便 useRequest 直接消费数据。如果你想要在消费数据时拿到后端的原始数据，需要在这里配置 dataField 为 '' 。\\n\\n比如你的后端返回的数据格式如下。\\n\\n```js\\n{\\n  success: true,\\n  data: 123,\\n  code: 1,\\n}\\n```\\n\\n那么 `useRequest` 就可以直接消费 `data`。其值为 123，而不是 `{ success, data, code }`\\n\\n## umi内置request\\n\\n通过 `import { request } from '@@/plugin-request'` 或 `import { request } from '@umijs/max'` 你可以使用umi内置的请求方法。\\n\\n`request` 接收的 `options`除了透传 [axios](https://axios-http.com/docs/req_config) 的所有 config 之外，umi还额外添加了几个属性 `skipErrorHandler`，`getResponse`，`requestInterceptors` 和 `responseInterceptors` 。\\n\\n示例如下：\\n\\n```js\\nrequest('/api/user', {\\n  params: { name : 1 },\\n  timeout: 2000,\\n  // other axios options\\n  skipErrorHandler: true,\\n  getResponse: false,\\n  requestInterceptors: [],\\n  responseInterceptors: [],\\n}\\n```\\n\\n当你的某个请求想要跳过错误处理时，可以通过将`skipErrorHandler`设为 `true` 来实现\\n\\nrequest 默认返回的是你后端的数据，如果你想要拿到 axios 完整的 response 结构，可以通过传入 `{ getResponse: true }` 来实现。\\n\\n`requestInterceptors` 和 `responseInterceptors` 的写法同运行时配置中的拦截器写法相同，它们为 request 注册拦截器。区别在于这里注册的拦截器是 \\\"一次性\\\" 的。另外，这里写的拦截器会在运行时配置中的拦截器之后被注册。**\\n\\n<strong>注意： 当你使用了 errorHandler 时，在这里注册的 response 拦截器会失效，因为在 errorHandler 就会 throw error</strong>\\n\\n\\n## 页面中调用接口\\n### ✨配和useRequest调用接口\\n```jsx\\nimport React from 'react'\\nimport { useRequest } from '@umijs/max';\\nimport request from \\\"@antdp/request\\\"\\n\\nconst Index = () => {\\n  const selectById  = (params) => request(\\\"/api/selectById\\\",{ method:\\\"POST\\\",data: { ...params } })\\n  const [ name ,setName ] = React.useState('')\\n  const { run, loading } = useRequest(selectById,\\n    manual: true,\\n    onSuccess: (req) => {\\n      setName(req);\\n    },\\n  )\\n\\n  React.useEffect(()=>run( id:1 ),[])\\n\\n  return <div>{name}</div>\\n}\\nexport default Index\\n```\\n### 配合dva调用接口\\n> 在servers/index.js中\\n```ts\\nimport { request } from \\\"@uiw-admin/utils\\\"\\n\\nexport const selectById  = (params) => request(\\\"/api/selectById\\\",{ method:\\\"POST\\\",data: { ...params } })\\n\\n```\\n> 在model/index.js中\\n```js\\nimport { selectById } from '../servers';\\n\\nexport default {\\n  namespace:'index',\\n  state:{\\n    name:'',\\n  },\\n  reducers:{\\n    updateState: (state, payload) => ({\\n      ...state,\\n      ...payload,\\n    }),\\n  },\\n  effects:{\\n    selectById({ paylog },{ call,put }){\\n      const data = yield call(selectById, payload);\\n      if(data.code === 1){\\n        yield put({\\n          type: 'updateData',\\n          paylog:{\\n            name:data.data\\n          }\\n        })\\n      }\\n    }\\n  }\\n}\\n\\n```\\n\\n> 在页面中调用\\n```jsx\\nimport React from 'react';\\nimport { useDispatch, useSelector } from 'dva';\\n\\nexport default const Index = () => {\\n  const dispatch = useDispatch()\\n  const { name } = useSelector(state => state.index) || {}\\n  React.useEffect(()=>{\\n     dispatch({\\n      type: 'index/selectById',\\n      payload:{ id:1 },\\n    })\\n  },[])\\n  return <div>{name}</div>\\n}\\n```\\n\\n## License\\n\\nLicensed under the MIT License.\"\n  }"],"names":["components","data","source"],"sourceRoot":""}