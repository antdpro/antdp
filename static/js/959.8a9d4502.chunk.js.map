{"version":3,"file":"static/js/959.8a9d4502.chunk.js","mappings":"iIACA,WACIA,WAAY,CAAG,EACfC,KAAM,CAAC,EACPC,OAAQ,03H","sources":["pages/develop/request/README.md"],"sourcesContent":["\nexport default {\n    components: {  },\n    data: {},\n    source: \"# 网络请求\\n简介\\n对于中后台应用来说，很大一部分工作就在于请求后端的 CRUD 的接口，为进一步降低用户对请求层的感知，我们移除了默认生成的 utils/request.ts 文件，改成通过配置化的方式暴露给开发者做请求的配置和增强处理；同时通过业务总结出一套标准的接口结构规范，并提供统一的接口解析、错误处理的能力；后续将持续完善可配置项、提供垂直场景如列表、登录失效等解决方案。\\n## request\\n\\n系统的请求基于umi-request进行了二次封装，参见[umi-request](https://github.com/umijs/umi-request)\\n\\n## 方法\\n基于restful规范，提供了2个方法：\\n- get 获取服务端数据，参数拼接在url上，以 query string 方式发送给后端\\n- post 新增数据，参数以body形式发送给后端\\n\\n\\n## 参数\\n\\n| 参数    | 说明     | 类型           | 默认值 |\\n| :------ | :------- | :------------- | :----- |\\n| url | 请求地址 | string        | -      |\\n\\n### Options\\n| 参数    | 说明     | 类型           | 默认值 |\\n| :------ | :------- | :------------- | :----- |\\n| method | 请求方法 | `POST \\\\| GET`    | -      |\\n| data | 请求传递给后端的参数 | any      | -      |\\n\\n## 调用方式\\n\\n### ✨配和useRequest调用接口\\n```jsx\\nimport React from 'react'\\nimport { useRequest } from '@umijs/max';\\nimport request from \\\"@antdp/request\\\"\\n\\nconst Index = () => {\\n  const selectById  = (params) => request(\\\"/api/selectById\\\",{ method:\\\"POST\\\",body: { ...params } })\\n  const [ name ,setName ] = React.useState('')\\n  const { run, loading } = useRequest(selectById,\\n    manual: true,\\n    onSuccess: (req) => {\\n      setName(req);\\n    },\\n  )\\n\\n  React.useEffect(()=>run( id:1 ),[])\\n\\n  return <div>{name}</div>\\n}\\nexport default Index\\n```\\n### 在dva中使用\\n> 在servers/index.js中\\n```ts\\nimport { request } from \\\"@uiw-admin/utils\\\"\\n\\nexport const selectById  = (params) => request(\\\"/api/selectById\\\",{ method:\\\"POST\\\",body: { ...params } })\\n\\n```\\n> 在model/index.js中\\n```js\\nimport { selectById } from '../servers';\\n\\nexport default {\\n  namespace:'index',\\n  state:{\\n    name:'',\\n  },\\n  reducers:{\\n    updateState: (state, payload) => ({\\n      ...state,\\n      ...payload,\\n    }),\\n  },\\n  effects:{\\n    selectById({ paylog },{ call,put }){\\n      const data = yield call(selectById, payload);\\n      if(data.code === 1){\\n        yield put({\\n          type: 'updateData',\\n          paylog:{\\n            name:data.data\\n          }\\n        })\\n      }\\n    }\\n  }\\n}\\n\\n```\\n\\n> 在页面中调用\\n```jsx\\nimport React from 'react';\\nimport { useDispatch, useSelector } from 'dva';\\n\\nexport default const Index = () => {\\n  const dispatch = useDispatch()\\n  const { name } = useSelector(state => state.index) || {}\\n  React.useEffect(()=>{\\n     dispatch({\\n      type: 'index/selectById',\\n      payload:{ id:1 },\\n    })\\n  },[])\\n  return <div>{name}</div>\\n}\\n```\\n\\n## License\\n\\nLicensed under the MIT License.\"\n  }"],"names":["components","data","source"],"sourceRoot":""}